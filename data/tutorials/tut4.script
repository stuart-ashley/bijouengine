/* create static variable of type SgModel */
static myCube = SgModel(
    /* assign node to default model parameter */
    default=SgNode(
        /* define vertices of cube */
        SgVertexAttribute( "a_position",
            List( Vec3( -1, -1, -1 ), Vec3( -1, -1,  1 ), Vec3( -1,  1, -1 ),
                Vec3( -1,  1,  1 ), Vec3(  1, -1, -1 ), Vec3(  1, -1,  1 ),
                Vec3(  1,  1, -1 ), Vec3(  1,  1,  1 ) ) ),
        /* define color uniform */
        SgUniform( "Color", 0.8, 0, 0, 1 ),
        /* specify default shader flags */
        SgShader( flags=List( 'COLOR', 'LAMBERT' ) ),
        /* define triangle indices of cube */
        SgIndexedTriangles(
            List( 0, 1, 3, 0, 3, 2,
                0, 4, 5, 0, 5, 1,
                0, 2, 6, 0, 6, 4,
                1, 5, 7, 1, 7, 3,
                4, 6, 7, 4, 7, 5,
                2, 3, 7, 2, 7, 6 ) ) ) );

/* icosphere class */
class Icosphere {
    /* icosahedron vertices */
    static icosahedronVertices = List( Vec3( -1, 1.618, 0 ), Vec3( 1, 1.618, 0 ),
            Vec3( -1, -1.618, 0 ), Vec3( 1, -1.618, 0 ), Vec3( 0, -1, 1.618 ),
            Vec3( 0, 1, 1.618 ), Vec3( 0, -1, -1.618 ), Vec3( 0, 1, -1.618 ),
            Vec3( 1.618, 0, -1 ), Vec3( 1.618, 0, 1 ), Vec3( -1.618, 0, -1 ),
            Vec3( -1.618, 0, 1 ) );

    /* icosahedron edge vertex indices */
    static icosahedronEdgeVertexIndices = List( 0, 11, 0, 5, 0, 1, 0, 7, 0, 10, 1,
            5, 5, 11, 11, 10, 10, 7, 7, 1, 3, 9, 3, 4, 3, 2, 3, 6, 3, 8, 4, 9, 2,
            4, 6, 2, 8, 6, 9, 8, 5, 9, 9, 1, 11, 4, 4, 5, 10, 2, 2, 11, 7, 6, 6,
            10, 1, 8, 8, 7 );

    /* icosahedron triangle edge indices */
    static icosahedronTriangleEdgeIndices = List( 0, 6, 1, 1, 5, 2, 2, 9, 3,
            3, 8, 4, 4, 7, 0, 5, 20, 21, 6, 22, 23, 7, 24, 25, 8, 26, 27, 9,
            28, 29, 10, 15, 11, 11, 16, 12, 12, 17, 13, 13, 18, 14, 14, 19,
            10, 15, 20, 23, 16, 22, 25, 17, 24, 27, 18, 26, 29, 19, 28, 21 );

    /* constructor */
    def __init__() {
        this.vertices = Icosphere.icosahedronVertices;
        this.edges = Icosphere.icosahedronEdgeVertexIndices;
        this.triangles = Icosphere.icosahedronTriangleEdgeIndices;
        this.colors = List();
        for ( v : this.vertices ) {
            x = Math.random() * .5;
            this.colors.add( Color( x, x, 1, 1 ) );
        }
    }

    /* from triangle edge indices and edge vertex indices,
       construct triangle vertex indices */
    def getTriangleVertexIndices() {
        triangleVertexIndices = List();

        for ( i : Math.range( 0, this.triangles.size(), 3 ) ) {
            /* triangle edge indices */
            tei0 = this.triangles.get( i );
            tei1 = this.triangles.get( i + 1 );
            tei2 = this.triangles.get( i + 2 );
            /* triangle vertex indices */
            te0vi0 = this.edges.get( tei0 * 2 );
            te0vi1 = this.edges.get( ( tei0 * 2 ) + 1 );

            te1vi0 = this.edges.get( tei1 * 2 );
            te1vi1 = this.edges.get( ( tei1 * 2 ) + 1 );

            if ( te0vi0 == te1vi0 ) {
                tvi0 = te0vi1;
                tvi1 = te0vi0;
                tvi2 = te1vi1;
            } elif ( te0vi0 == te1vi1 ) {
                tvi0 = te0vi1;
                tvi1 = te0vi0;
                tvi2 = te1vi0;
            } elif ( te0vi1 == te1vi0 ) {
                tvi0 = te0vi0;
                tvi1 = te0vi1;
                tvi2 = te1vi1;
            } else {
                tvi0 = te0vi0;
                tvi1 = te0vi1;
                tvi2 = te1vi0;
            }

            triangleVertexIndices.add( tvi0 );
            triangleVertexIndices.add( tvi1 );
            triangleVertexIndices.add( tvi2 );
        }
        return triangleVertexIndices;
    }

    /* construct model node */
    def getModel() {
        return SgModel(
            default=SgNode(
                /* define vertices */
                SgVertexAttribute( "a_position", this.vertices ),
                /* define color */
                SgVertexAttribute( "a_color", this.colors ),
                /* specify default shader flags */
                SgShader( flags=List( 'VERTEX_COLOR', 'UNLIT' ) ),
                /* define triangle indices of cube */
                SgIndexedTriangles( this.getTriangleVertexIndices() ) ) );
    }

    /* scale icosphere */
    def scale( s ) {
        vertices = List();

        for ( v : this.vertices ) {
            vertices.add( v * s );
        }

        this.vertices = vertices;
    }

    /* flip triangle winding order, ie turn inside out */
    def flipTriangles() {
        triangles = List();

        for ( i : Math.range( 0, this.triangles.size(), 3 ) ) {
            triangles.add( this.triangles.get( i ) );
            triangles.add( this.triangles.get( i + 2 ) );
            triangles.add( this.triangles.get( i + 1 ) );
        }

        this.triangles = triangles;
    }

    /* subdivide triangles, creating 4 triangles where there was 1 */
    def subdivide() {
        /* color variation scale */
        s = 2 * Math.sqrt( this.triangles.size() /
                Icosphere.icosahedronTriangleEdgeIndices.size() );
        /* new edges */
        edges = List();
        /* copy existing vertices */
        vertices = List();
        vertices.addAll( this.vertices );
        /* copy existing colors */
        colors = List();
        colors.addAll( this.colors );
        /* run though edges */
        for ( i : Math.range( 0, this.edges.size(), 2 ) ) {
            /* get existing edge start and end index */
            evi0 = this.edges.get( i );
            evi1 = this.edges.get( i + 1 );

            /* add edge start, midpoint index */
            edges.add( evi0 );
            edges.add( vertices.size() );
            /* add midpoint, end index */
            edges.add( vertices.size() );
            edges.add( evi1 );

            /* add midpoint vertex */
            v = vertices.get( evi0 ) + vertices.get( evi1 );
            v = ( v / v.magnitude() ) * 1.902;
            vertices.add( v );

            /* midpoint color */
            c = ( colors.get( evi0 ) + colors.get( evi1 ) ) / 2;
            x = ( Math.random() - .5 ) / s;
            colors.add( c + Color( x, x, 1, 0 ) );
        }

        triangles = List();
        for ( i : Math.range( 0, this.triangles.size(), 3 ) ) {
            /* triangle edge indices */
            tei0 = this.triangles.get( i );
            tei1 = this.triangles.get( i + 1 );
            tei2 = this.triangles.get( i + 2 );
            /* triangle vertex indices */
            te0vi0 = this.edges.get( tei0 * 2 );
            te0vi1 = this.edges.get( ( tei0 * 2 ) + 1 );

            te1vi0 = this.edges.get( tei1 * 2 );
            te1vi1 = this.edges.get( ( tei1 * 2 ) + 1 );

            te2vi0 = this.edges.get( tei2 * 2 );
            te2vi1 = this.edges.get( ( tei2 * 2 ) + 1 );

            /* new triangle edge indices */
            if ( ( te0vi0 == te1vi0 ) || ( te0vi0 == te1vi1 ) ) {
                nt1ei0 = tei0 * 2;
                nt0ei0 = nt1ei0 + 1;
            } else {
                nt0ei0 = tei0 * 2;
                nt1ei0 = nt0ei0 + 1;
            }

            if ( ( te1vi0 == te2vi0 ) || ( te1vi0 == te2vi1 ) ) {
                nt2ei1 = tei1 * 2;
                nt1ei1 = nt2ei1 + 1;
            } else {
                nt1ei1 = tei1 * 2;
                nt2ei1 = nt1ei1 + 1;
            }

            if ( ( te2vi0 == te0vi0 ) || ( te2vi0 == te0vi1 ) ) {
                nt0ei2 = tei2 * 2;
                nt2ei2 = nt0ei2 + 1;
            } else {
                nt2ei2 = tei2 * 2;
                nt0ei2 = nt2ei2 + 1;
            }

            /* new edge indices */
            nei0 = edges.size() / 2;
            nei1 = nei0 + 1;
            nei2 = nei1 + 1;

            /* new edges */
            edges.add( this.vertices.size() + tei0 );
            edges.add( this.vertices.size() + tei1 );
            edges.add( this.vertices.size() + tei1 );
            edges.add( this.vertices.size() + tei2 );
            edges.add( this.vertices.size() + tei2 );
            edges.add( this.vertices.size() + tei0 );

            /* replacement triangles */
            triangles.add( nt0ei0 );
            triangles.add( nei2 );
            triangles.add( nt0ei2 );

            triangles.add( nt1ei0 );
            triangles.add( nt1ei1 );
            triangles.add( nei0 );

            triangles.add( nei1 );
            triangles.add( nt2ei1 );
            triangles.add( nt2ei2 );

            triangles.add( nei0 );
            triangles.add( nei1 );
            triangles.add( nei2 );
        }

        /* apply changes */
        this.vertices = vertices;
        this.edges = edges;
        this.triangles = triangles;
        this.colors = colors;
    }
}

/* create camera */
static myCamera = SgCamera( "camera" );

/* camera rotation */
static myCameraRotation = SgRotate( Quat( 0, 0, 0, 1 ) );

/* sphere */
static mySkySphere = null;

/* create scene graph */
static myGraph = SgNode(
    SgNode(
        /* rotation */
        myCameraRotation,
        /* translation */
        SgTranslate( Vec3( 0, 0, 100 ) ),
        /* my camera */
        myCamera
    ),
    SgNode(
        /* rotation */
        SgRotate( Quat( 0.375218, 0.100259, 0.677608, 0.624505 ) ),
        /* sunlight */
        SgSunlight( color=Color( 1, 1, 1 ) )
    )
);

/* create view task, specifying camera and scene graph */
static myView = ViewTask( camera=myCamera, root=myGraph );

static cubes = null;

/* update routine */
def update( state ) {
    if ( mySkySphere == null ) {
        mySkySphere = Icosphere();
        mySkySphere.subdivide();
        mySkySphere.subdivide();
        mySkySphere.subdivide();
        mySkySphere.subdivide();
        mySkySphere.subdivide();
        mySkySphere.scale( 100 );
        mySkySphere.flipTriangles();
        myGraph.append( mySkySphere.getModel() );
    }

    /* check if cubes need initializing */
    if ( cubes == null ) {
        /* new list */
        cubes = List();
        /* for each vertex in the icosahedron */
        for ( i : Math.range( Icosphere.icosahedronVertices.size() ) ) {
            /* get vertex position */
            pos = Icosphere.icosahedronVertices.get( i );
            /* create rigid body at vertex scaled by 50 with velocity toward centre */
            body = SgRigidBody( name="cube" + i, inverseMass=1,
                    translation=pos * 50,
                    rotation=Quat( 0, 0, 0, 1 ),
                    velocity=pos * -20,
                    angularVelocity=pos,
                    gravity=Vec3( 0, 0, 0 ),
                    collision=Collision( BoundingBox( min=Vec3( -1, -1, -1 ),
                            max=Vec3( 1, 1, 1 ) ) ),
                    model=myCube );
            /* add body to list and append to scene graph */
            cubes.add( body );
            myGraph.append( body );
        }
    }

    /* for each cube */
    for ( i : Math.range( cubes.size() ) ) {
        /* check position of cube */
        cube = cubes.get( i );
        if ( cube.getTranslation().magnitude() > 100 ) {
            /* if cube is at edge of sky sphere, reposition at icosahedron
               vertex scaled by 50 with velocity toward centre */
            pos = Icosphere.icosahedronVertices.get( i );
            cube.setTranslation( pos * 50 );
            cube.setVelocity( pos * -20 );
        }
    }

    /* match camera aspect ratio to window */
    myCamera.setAspectRatio( System.width / System.height );
    for ( event : state.getEvents( 'mouse' ) ) {
        if ( event.getAction() == 'position' ) {
            pos = event.getData();
            theta = ( Math.pi * 2 ) * pos.x;
            phi = Math.pi * ( 1 - pos.y );
            polar = Quat( Math.sin( phi / 2 ), 0, 0, Math.cos( phi / 2 ) );
            v = ( polar.getConjugate() * Vec3( 0, 0, 1 ) ) * Math.sin( theta / 2 );
            azimuth = Quat( v.x, v.y, v.z, Math.cos( theta / 2 ) );
            myCameraRotation.setRotation( polar * azimuth );
        }
    }
    /* add view task to state */
    state.addTask( myView );
}
