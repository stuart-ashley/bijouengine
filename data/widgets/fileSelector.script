class FileItem {
	def __init__( name, file ) {
		this.file = file;
		if ( file.isDir() ) {
			image = '../textures/folder.png';
		} else {
			image = '../textures/script.png';
		}
		this.icon = PanelTask( blend="ADDITIVE", level=1, source=Texture( file=image ),
			shader=Shader( vp="shaders/colmap.vp", fp="../shaders/colmapFlipY.fp" ) );
		this.label = LabelTask( justify="centre", level=1, text=name );
	}

	def setRect( rect ) {
		bw = 10 / System.width;
		bh = 10 / System.height;
		this.rect = Rect( rect.left + bw, rect.right - bw, rect.bottom + bh, rect.top - bh );
		this.defocus();
	}

	def focus() {
		offset = 10 / System.height;
		div = ( this.rect.bottom + offset ) + ( this.rect.getHeight() / 6 );
		this.icon.setDstRect( Rect( this.rect.left, this.rect.right, div, this.rect.top + offset ) );
		this.label.setRect( Rect( this.rect.left, this.rect.right, this.rect.bottom + offset, div ) );
	}

	def defocus() {
		offset = 10 / System.height;
		div = ( this.rect.bottom - offset ) + ( this.rect.getHeight() / 6 );
		this.icon.setDstRect( Rect( this.rect.left, this.rect.right, div, this.rect.top - offset ) );
		this.label.setRect( Rect( this.rect.left, this.rect.right, this.rect.bottom - offset, div ) );
	}

	def update( state ) {
		state.addTask( this.icon );
		state.addTask( this.label );
	}
}

class SideBar {
	def __init__( rect ) {
		this.bar = LabelTask( level=2, opaque=true, bgColor=Color( 1, 1, .3 ), text=" " );
		this.setRect( rect );
	}

	def setRect( rect ) {
		this.bar.setRect( rect );
	}

	def contains( p ) {
		return this.bar.getRect().contains( p );
	}

	def update( state ) {
		state.addTask( this.bar );
	}
}

class FileSelector {
	def __init__( rect, dir, filter, select ) {
		this.rect = rect;
		this.startDir = dir;
		this.filter = filter;
		this.select = select;
		this.items = List();
		this.curDir = null;
		this.active = null;
		this.sideBar = null;
		this.barActive = false;
		this.offset = 0;
	}

	def changeDir( dir ) {
		this.items = List();

		parent = dir.getParent();
		if ( parent != null ) {
			this.items.add( FileItem( '..', dir.getParent() ) );
		}

		contents = dir.getDirectoryContents();

		for ( file : contents ) {
			if ( file.isDir() ) {
				name = file.getName();
				if ( name != '.' ) {
					if ( name != '..' ) {
						if ( this.filter( file ) ) {
							this.items.add( FileItem( name, file ) );
						}
					}
				}
			}
		}

		for ( file : contents ) {
			if ( file.isFile() ) {
				if ( this.filter( file ) ) {
					this.items.add( FileItem( file.getName(), file ) );
				}
			}
		}

		this.offset = 0;
		this.move( 0 );

		this.curDir = dir;
	}

	def move( delta ) {
		/* icon width & height */
		w = 200 / System.width;
		h = 200 / System.height;

		/* side bar width */
		sbw = 20 / System.width;

		/* calc height */
		nCols = Math.floor( 1 / w );
		this.height = h * Math.ceil( this.items.size() / nCols );
		if ( this.height > 1 ) {
			nCols = Math.floor( ( 1 - sbw ) / w );
			this.height = h * Math.ceil( this.items.size() / nCols );
		}

		/* clamp offset */
		this.offset = Math.clamp( this.offset + delta, 0, Math.max( 0, this.height - 1 ) );

		/* update icons positions */
		col = 0;
		top = 1 + this.offset;
		for ( item : this.items ) {
			if ( col >= nCols ) {
				col = 0;
				top = top - h;
			}
			item.setRect( Rect( col * w, ( col + 1 ) * w, top - h, top ) );
			col = col + 1;
		}

		/* side bar */
		if ( this.height > 1 ) {
			top = 1 - ( this.offset / this.height );
			bottom = 1 - ( ( this.offset + 1 ) / this.height );
			this.sideBar = SideBar( Rect( 1 - sbw, 1, bottom, top ) );
		} else {
			this.sideBar = null;
		}
	}

	def update( state ) {
		if ( this.curDir == null ) {
			this.changeDir( this.startDir );
		}
		for ( event : state.getEvents( 'mouse' ) ) {
			action = event.getAction();
			data = event.getData();

			if ( action == 'position' ) {
				if ( this.barActive ) {
					dy = this.pos.y - data.y;
					this.move( this.height * dy );
				} else {
					if ( this.active != null ) {
						if ( this.active.rect.contains( data ) == false ) {
							this.active.defocus();
							this.active = null;
						}
					}
					if ( this.active == null ) {
						for ( item : this.items ) {
							if ( item.rect.contains( data ) ) {
								item.focus();
								this.active = item;
							}
						}
					}
				}

				this.pos = data;
			} elif( data == 'left' ) {
				if ( action == 'up' ) {
					/* left button up */
					if ( this.barActive ) {
						this.barActive = false;
					} elif ( this.active != null ) {
						if ( this.active.file.isFile() ) {
							this.select( this.active.file );
						} else {
							this.changeDir( this.active.file );
						}
						this.active.defocus();
						this.active = null;
					}
				} elif ( action == 'down' ) {
					/* left button down */
					if ( this.sideBar != null ) {
						if ( this.sideBar.contains( this.pos ) ) {
							this.barActive = true;
						}
					}
				}
			}
		}
		for ( item : this.items ) {
			item.update( state );
		}
		if ( this.sideBar != null ) {
			this.sideBar.update( state );
		}
	}
}
